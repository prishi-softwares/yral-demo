package org.example.yarldemo.network

import co.touchlab.kermit.Logger
import okhttp3.Interceptor
import okhttp3.Interceptor.Chain
import okhttp3.Request
import okhttp3.Response
import okio.Buffer

/*
 * Copyright (C) 2016 Jeff Gilfelt.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An OkHttp interceptor that logs requests as curl shell commands. They can then
 * be copied, pasted and executed inside a terminal environment. This might be
 * useful for troubleshooting client/server API interaction during development,
 * making it easy to isolate and share requests made by the app.
 *
 * Warning: The
 * logs generated by this interceptor have the potential to leak sensitive
 * information. It should only be used in a controlled manner or in a
 * non-production environment.
 */
class CurlLoggingInterceptor : Interceptor {
    private var curlOptions: String? = null

    /**
     * Set any additional curl command options (see 'curl --help').
     */
//    fun setCurlOptions(curlOptions: String?) {
//        this.curlOptions = curlOptions
//    }

    override fun intercept(chain: Chain): Response {
        val request: Request = chain.request()

        if (request.method.equals("put", ignoreCase = true)) {
            return chain.proceed(request)
        }

        val compressed = request.headers["Accept-Encoding"]?.equals("gzip", ignoreCase = true) == true
        val curlCmd = buildString {
            append("curl")
            if (curlOptions != null) append(" $curlOptions")
            append(" -X ${request.method}")

            request.headers.forEach { (name, value) ->
                append(" -H \"$name: $value\"")
            }

            request.body?.let {
                val buffer = Buffer()
                it.writeTo(buffer)
                val charset = it.contentType()?.charset(Charsets.UTF_8) ?: Charsets.UTF_8
                append(" --data \$'${buffer.readString(charset).replace("\n", "\\n")}'")
            }

            append(if (compressed) " --compressed " else " ")
            append(request.url)
        }

        Logger.d(
            """
        ╭--- cURL (${request.url})
        $curlCmd
        ╰--- (copy and paste the above line to a terminal)
        """.trimIndent()
        )

        return chain.proceed(request)
    }
}
